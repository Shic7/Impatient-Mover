#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm> 

using namespace std;

int naiveMover (int n, int weightdata[])
{
	
	int i, j, a;
	int mindata[n];
	//mindata = {};
	fill_n(mindata, n, 0);
	int maxBox = 0;

	for (a= 1; a <= n; a++)
	{
		cout << weightdata[n-a] << " = Original";
	int minvalue = *std::min_element(weightdata+(n-a),weightdata+n);
	cout << endl << "min " << minvalue << endl;
	
	if ( weightdata [n-a] == minvalue)
		mindata[(n-a)] += 1;
	else
		////////////the recurrence 
	{
		for (i=(n-a)+1; i < n; i++)
		{cout << " && " << weightdata[n-a] << " > " << weightdata[i] << endl;
			if (weightdata[n-a] > weightdata[i])
			{
				cout << mindata[i] << " >== " <<  maxBox << endl;
				if(mindata[i] > maxBox)
					maxBox = mindata[i];//update mx box 
			}
		}
		mindata[n-a] = 1 + maxBox;
		maxBox = 0; //clear max boxes variable
		
	}

}

cout << endl;
for (i = 0; i < n; i++)
	cout << mindata[i] << endl;

return *std::max_element(mindata,mindata+n);
}

int main ()
{
//int n = 10;		//Number of boxes
// box arrangement for testing
//int weightdata [] = {39};
//int weightdata [] = {8, 39};
//int weightdata [] = {39, 8};
//int weightdata [] = {40, 8, 39};
//int weightdata [] = {28, 40, 8, 39};
//int weightdata [] = {26, 28, 40, 8, 39};
//int weightdata [] = {35, 26, 28, 40, 8, 39};
//int weightdata [] = {18, 35, 26, 28, 40, 8, 39};
//int weightdata [] = {30, 18, 35, 26, 28, 40, 8, 39};
//int weightdata [] = {20, 30, 18, 35, 26, 28, 40, 8, 39};
//int weightdata [] = {29, 20, 30, 18, 35, 26, 28, 40, 8, 39};		//4
int weightdata [] = {38, 35, 45, 39, 23, 16, 26, 28, 20, 5, 8, 17, 12, 10, 13, 42, 6, 34, 33, 37};		//8

cout << "Main Start: \n";
cout << "size of the array: " <<sizeof(weightdata)/sizeof(int) << endl;
cout << "\nThe return Final OutPut: " << naiveMover (sizeof(weightdata)/sizeof(int), weightdata) << endl;
	return 0;
}
